// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: ValidationService/api/ValidationService.proto

package ValidationServiceApiPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ValidationService_ValidateAddToCart_FullMethodName  = "/validation.ValidationService/ValidateAddToCart"
	ValidationService_ValidateDeleteItem_FullMethodName = "/validation.ValidationService/ValidateDeleteItem"
	ValidationService_ValidateClearCart_FullMethodName  = "/validation.ValidationService/ValidateClearCart"
	ValidationService_ValidateGetCart_FullMethodName    = "/validation.ValidationService/ValidateGetCart"
)

// ValidationServiceClient is the client API for ValidationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidationServiceClient interface {
	ValidateAddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
	ValidateDeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
	ValidateClearCart(ctx context.Context, in *ClearCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
	ValidateGetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
}

type validationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidationServiceClient(cc grpc.ClientConnInterface) ValidationServiceClient {
	return &validationServiceClient{cc}
}

func (c *validationServiceClient) ValidateAddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, ValidationService_ValidateAddToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationServiceClient) ValidateDeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, ValidationService_ValidateDeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationServiceClient) ValidateClearCart(ctx context.Context, in *ClearCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, ValidationService_ValidateClearCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationServiceClient) ValidateGetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, ValidationService_ValidateGetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationServiceServer is the server API for ValidationService service.
// All implementations must embed UnimplementedValidationServiceServer
// for forward compatibility.
type ValidationServiceServer interface {
	ValidateAddToCart(context.Context, *AddToCartRequest) (*GetCartResponse, error)
	ValidateDeleteItem(context.Context, *DeleteItemRequest) (*GetCartResponse, error)
	ValidateClearCart(context.Context, *ClearCartRequest) (*GetCartResponse, error)
	ValidateGetCart(context.Context, *GetCartRequest) (*GetCartResponse, error)
	mustEmbedUnimplementedValidationServiceServer()
}

// UnimplementedValidationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedValidationServiceServer struct{}

func (UnimplementedValidationServiceServer) ValidateAddToCart(context.Context, *AddToCartRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAddToCart not implemented")
}
func (UnimplementedValidationServiceServer) ValidateDeleteItem(context.Context, *DeleteItemRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDeleteItem not implemented")
}
func (UnimplementedValidationServiceServer) ValidateClearCart(context.Context, *ClearCartRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateClearCart not implemented")
}
func (UnimplementedValidationServiceServer) ValidateGetCart(context.Context, *GetCartRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateGetCart not implemented")
}
func (UnimplementedValidationServiceServer) mustEmbedUnimplementedValidationServiceServer() {}
func (UnimplementedValidationServiceServer) testEmbeddedByValue()                           {}

// UnsafeValidationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidationServiceServer will
// result in compilation errors.
type UnsafeValidationServiceServer interface {
	mustEmbedUnimplementedValidationServiceServer()
}

func RegisterValidationServiceServer(s grpc.ServiceRegistrar, srv ValidationServiceServer) {
	// If the following call pancis, it indicates UnimplementedValidationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ValidationService_ServiceDesc, srv)
}

func _ValidationService_ValidateAddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).ValidateAddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationService_ValidateAddToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).ValidateAddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationService_ValidateDeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).ValidateDeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationService_ValidateDeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).ValidateDeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationService_ValidateClearCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).ValidateClearCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationService_ValidateClearCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).ValidateClearCart(ctx, req.(*ClearCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationService_ValidateGetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).ValidateGetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationService_ValidateGetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).ValidateGetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidationService_ServiceDesc is the grpc.ServiceDesc for ValidationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "validation.ValidationService",
	HandlerType: (*ValidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateAddToCart",
			Handler:    _ValidationService_ValidateAddToCart_Handler,
		},
		{
			MethodName: "ValidateDeleteItem",
			Handler:    _ValidationService_ValidateDeleteItem_Handler,
		},
		{
			MethodName: "ValidateClearCart",
			Handler:    _ValidationService_ValidateClearCart_Handler,
		},
		{
			MethodName: "ValidateGetCart",
			Handler:    _ValidationService_ValidateGetCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ValidationService/api/ValidationService.proto",
}
